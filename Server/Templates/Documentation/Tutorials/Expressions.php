<?php
use vDesk\Documentation\Code;
?>
<h2>Database-Expressions</h2>
<p>
    This tutorial describes working with databases using vDesk's "Expression"-library.<br>
</p>
<h3>Overview</h3>
<ul class="Topics">
    <li>
        <a href="#Expressions">Expressions</a>
        <ul class="Topics">
            <li><a href="#Resultsets">Resultsets</a></li>
        </ul>
    </li>
    <li>
        <a href="#Functions">Functions</a>
        <ul class="Topics">
            <li><a href="#SupportedFunctions">Supported Functions</a></li>
        </ul>
    </li>
    <li>
        <a href="#DatabaseRecords">Database records</a>
        <ul class="Topics">
            <li><a href="#Filtering">Filtering records</a></li>
            <li>
                <a href="#Select">Selecting database records</a>
                <ul class="Topics">
                    <li><a href="#Aliases">Aliases</a></li>
                    <li>
                        <a href="#Joins">Joining tables</a>
                        <ul class="Topics">
                            <li><a href="#JoinAliases">Aliases</a></li>
                        </ul>
                    </li>
                    <li><a href="#Union">Selecting from multiple resultsets</a></li>
                </ul>
            </li>
            <li>
                <a href="#Insert">Creating database records</a>
                <ul class="Topics">
                    <li><a href="#LastInsertID">Retrieving autogenerated values</li>
                </ul>
            </li>
            <li>
                <a href="#Update">Updating database records</a>
                <ul class="Topics">
                    <li><a href="#ConditionalUpdate">Conditional updates</a></li>
                </ul>
            </li>
            <li>
                <a href="#Delete">Deleting database records</a>
            </li>
        </ul>
    </li>
    <li>
        <a href="#Create">Creating databases and tables</a>
        <ul class="Topics">
            <li><a href="#CreateDatabase">Databases</a></li>
            <li><a href="#CreateTable">Tables</a></li>
        </ul>
    </li>
    <li>
        <a href="#Alter">Updating databases and tables</a>
    </li>
    <li>
        <a href="#Drop">Deleting databases and tables</a>
        <ul class="Topics">
            <li><a href="#DropDatabase">Databases</a></li>
            <li><a href="#DropTable">Tables</a></li>
        </ul>
    </li>
</ul>
<hr>
<h3 id="Expressions">Expressions</h3>
<p>
    Besides querying manually the database via passing plain SQL-strings through the <code class="Inline">\vDesk\<?= Code::Class("DataProvider") ?>::<?= Code::Function("Execute") ?>()</code>-method,<br>
    vDesk ships with a library that provides an "expressive" way of working with databases.
</p>
<p>
    Expressions are early evaluated fluent interfaces which care about proper value escaping and building SQL statements compatible to the current configured database.
    
</p>
<h4 id="Resultsets">Resultsets</h4>
<p>
    To execute an Expression and retrieve its resultset, an Expression has to be finished with a call to the <code
            class="Inline">\vDesk\DataProvider\<?= Code::Class("IExpression") ?>::<?= Code::Function("Execute") ?>()</code>-method in its call-chain.
</p>
<p>
    The manual execution and retrieval of the resultset can be skipped by simply directly iterating over an Expression; this will immediately execute the Expression and the
    resultset it yields will be used for the iterator.<br>
    Iterating over a resultset, will yield the value of calling the <code class="Inline">\vDesk\DataProvider\<?= Code::Class("IResult") ?>::<?= Code::Function("ToMap") ?>()</code>-method
    on each row of the result.
</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::ForEach ?>(
    <?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"Name\"") ?>, <?= Code::String("\"Price\"") ?>)
              -><?= Code::Function("From") ?>(<?= Code::String("\"Products\"") ?>)
              -><?= Code::Function("Where") ?>([<?= Code::String("\"Price\"") ?> => [<?= Code::String("\">\"") ?> => <?= Code::Int("20.3") ?>]])
    <?= Code::Keyword("as") ?>
        
        <?= Code::Variable("\$Product") ?>

) {
    <?= Code::Keyword("echo") ?> <?= Code::String("\"Product: ") ?>{<?= Code::Variable("\$Product") ?>[<?= Code::String("\"Name\"") ?>]}<?= Code::String(", Price: ") ?>{<?= Code::Variable("\$Product") ?>[<?= Code::String("\"Price\"") ?>]}<?= Code::String("\$.\"") ?><?= Code::Delimiter ?>

}</code></pre>
</div>
<p>
    Single values can be retrieved by invoking the Expression as a function which executes it and calls the <code class="Inline">\vDesk\DataProvider\<?= Code::Class("IResult") ?>::<?= Code::Function("ToValue") ?>()</code>-method on its resultset.
</p>
<div style="display: flex; justify-content: space-around;">
    <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Variable("\$ID") ?> = <?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"ID\"") ?>)
-><?= Code::Function("From") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("Where") ?>([<?= Code::String("\"Name\"") ?> => <?= Code::String("\"Example\"") ?>])()<?= Code::Delimiter ?>
</code></pre>
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"ID\"") ?>)
-><?= Code::Function("From") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("Where") ?>([<?= Code::String("\"Name\"") ?> => <?= Code::String("\"Example\"") ?>])
-><?= Code::Function("Execute") ?>()
-><?= Code::Function("ToValue") ?>()<?= Code::Delimiter ?>
    </code></pre>
</div>
<hr>
<h3 id="Functions">Functions</h3>
<p>
    The Expression-library provides an abstract interface for applying aggregate-functions<br>
    via the global <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("Functions") ?></code>- and <code
            class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("λ") ?></code>-factories.
</p>
<p>
    Aggregate-functions are represented as an instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("IAggregateFunction") ?></code>-interface.<br>
    If an aggregate-function isn't supported by the current configured DataProvider, the <code
            class="Inline">\vDesk\DataProvider\Expression\Functions\<?= Code::Class("Generic") ?></code>-class will be used as fallback.

</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(
    <?= Code::Class("Functions") ?>::<?= Code::Function("Max") ?>(<?= Code::String("\"Size\"") ?>),
    [<?= Code::Class("λ") ?>::<?= Code::Function("Count") ?>(<?= Code::String("\"*\"") ?>), <?= Code::String("\"Amount\"") ?>]
)
-><?= Code::Function("From") ?>(<?= Code::String("\"Archive.Elements\"") ?>)<?= Code::Delimiter ?>
    </code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>
            
    <?= Code::Function("MAX") ?>(<?= Code::Field("Size") ?>),
    <?= Code::Function("COUNT") ?>(<?= Code::Field("*") ?>) <?= Code::Keyword("AS") ?> <?= Code::String("`Amount`") ?>
            
<?= Code::Keyword("FROM") ?>
            
    <?= Code::Class("Archive") ?>.<?= Code::Const("Elements") ?><?= Code::Delimiter ?>
</code></pre>
</div>
<h4 id="SupportedFunctions">Supported Functions</h4>
<p>The following table represents an enumeration of "natively" supported Aggregate-functions.</p>
<table>
    <tr>
        <th>Function</th>
        <th>MySQL</th>
        <th>MSSQL</th>
        <th>PgSQL</th>
    </tr>
    <tr>
        <td>AVG</td>
        <td>✓</td>
        <td>✗</td>
        <td>✗</td>
    </tr>
    <tr>
        <td>COUNT</td>
        <td>✓</td>
        <td>✗</td>
        <td>✗</td>
    </tr>
    <tr>
        <td>CURRENT_TIMESTAMP</td>
        <td>✓</td>
        <td>✗</td>
        <td>✗</td>
    </tr>
    <tr>
        <td>DISTINCT</td>
        <td>✓</td>
        <td>✗</td>
        <td>✗</td>
    </tr>
    <tr>
        <td>MAX</td>
        <td>✓</td>
        <td>✗</td>
        <td>✗</td>
    </tr>
    <tr>
        <td>MIN</td>
        <td>✓</td>
        <td>✗</td>
        <td>✗</td>
    </tr>
    <tr>
        <td>NOW</td>
        <td>✓</td>
        <td>✗</td>
        <td>✗</td>
    </tr>
    <tr>
        <td>SUM</td>
        <td>✓</td>
        <td>✗</td>
        <td>✗</td>
    </tr>
    <tr>
        <td>GROUP_CONCAT</td>
        <td>✗</td>
        <td>✗</td>
        <td>✗</td>
    </tr>
</table>
<hr>
<h3 id="DatabaseRecords">Database records</h3>
<h4 id="Filtering">Filtering records</h4>
<p>
    To filter records, the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("ISelect") ?></code>-, <code class="Inline"><?= Code::Class("IUpdate") ?></code> and
    <code class="Inline"><?= Code::Class("IDelete") ?></code>-Expressions provide the
    <code class="Inline"><?= Code::Class("IExpression") ?>::<?= Code::Function("Where") ?></code>-method which accepts a map of filtering conditions.
</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"*\"") ?>)
-><?= Code::Function("From") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("Where") ?>([
    <?= Code::String("\"ID\"") ?> => [<?= Code::String("\"IN\"") ?> => [<?= Code::Int("1") ?>, <?= Code::Int("2") ?>, <?= Code::Int("3") ?>]],
    <?= Code::String("\"Name\"") ?> => [<?= Code::String("\"LIKE\"") ?> => <?= Code::String("\"%invoice%\"") ?>],
    <?= Code::String("\"Extension\"") ?> => <?= Code::String("\"pdf\"") ?>,
    <?= Code::String("\"Size\"") ?> => [<?= Code::String("\"BETWEEN\"") ?> => [<?= Code::Int("1024") ?>, <?= Code::Int("4096") ?>]],
    <?= Code::String("\"CreationTime\"") ?> => [<?= Code::String("\"<\"") ?> => <?= Code::Class("λ") ?>::<?= Code::Function("CurrentTimestamp") ?>()]
])<?= Code::Delimiter ?>
    </code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>
            
    <?= Code::Field("*") ?>
            
<?= Code::Keyword("FROM") ?>

    <?= Code::Class("Archive") ?>.<?= Code::Const("Elements") ?>

<?= Code::Keyword("WHERE") ?>

    <?= Code::Field("ID") ?> = <?= Code::Keyword("IN") ?> (<?= Code::Int("1") ?>, <?= Code::Int("2") ?>, <?= Code::Int("3") ?>)
<?= Code::Keyword("AND") ?>
            
    <?= Code::Field("Name") ?> <?= Code::Keyword("LIKE") ?> <?= Code::String("\"%invoice%\"") ?>
    
<?= Code::Keyword("AND") ?>

    <?= Code::Field("Extension") ?> = <?= Code::String("\"pdf\"") ?>

<?= Code::Keyword("AND") ?>

    <?= Code::Field("Size") ?> <?= Code::Keyword("BETWEEN") ?> <?= Code::Int("1024") ?> <?= Code::Keyword("AND") ?> <?= Code::Int("4096") ?>

<?= Code::Keyword("AND") ?>

    <?= Code::Field("CreationTime") ?> < <?= Code::Const("CURRENT_TIMESTAMP") ?><?= Code::Delimiter ?>
</code></pre>
</div>
<p>Alternative conditions can be applied by passing further arrays of conditions.</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"*\"") ?>)
-><?= Code::Function("From") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("Where") ?>(
    [
        <?= Code::String("\"Name\"") ?> => [<?= Code::String("\"LIKE\"") ?> => <?= Code::String("\"%invoice%\"") ?>],
    ],
    [
        <?= Code::String("\"Extension\"") ?> => <?= Code::String("\"pdf\"") ?>,
        <?= Code::String("\"CreationTime\"") ?> => [<?= Code::String("\"<\"") ?> => <?= Code::Class("λ") ?>::<?= Code::Function("CurrentTimestamp") ?>()]
    ]
)<?= Code::Delimiter ?>
    </code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>

    <?= Code::Field("*") ?>

<?= Code::Keyword("FROM") ?>

    <?= Code::Class("Archive") ?>.<?= Code::Const("Elements") ?>

<?= Code::Keyword("WHERE") ?>

    <?= Code::Field("Name") ?> <?= Code::Keyword("LIKE") ?> <?= Code::String("\"%invoice%\"") ?>

<?= Code::Keyword("OR") ?> (
        <?= Code::Field("Extension") ?> = <?= Code::String("\"pdf\"") ?>
            
    <?= Code::Keyword("AND") ?>
            
        <?= Code::Field("CreationTime") ?> < <?= Code::Const("CURRENT_TIMESTAMP") ?>
        
)<?= Code::Delimiter ?>
</code></pre>
</div>
<hr>
<h4 id="Select">Selecting database records</h4>
<p>
    To query, filter and retrieve any records from the database, the Expression-library provides the global <code
            class="Inline">\vDesk\DataProvider\<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>()</code> factory-method;<br>
    which creates a new instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("ISelect") ?></code>-Expression according the current configured
    DataProvider.
</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"*\"") ?>)
-><?= Code::Function("From") ?>(<?= Code::String("\"Contacts.Companies\"") ?>)
-><?= Code::Function("Where") ?>([
    <?= Code::String("\"Country\"") ?> => <?= Code::String("\"US\"") ?>,
    <?= Code::String("\"Name\"") ?>    => [<?= Code::String("\"LIKE\"") ?> => <?= Code::String("\"%Example%Corporation%\"") ?>]
    ],
    [<?= Code::String("\"ZipCode\"") ?> => [<?= Code::String("\"BETWEEN\"") ?> => [<?= Code::Int("2000") ?>, <?= Code::Int("9001") ?>]]]
)<?= Code::Delimiter ?>
    
    </code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>

    <?= Code::Field("*") ?>

<?= Code::Keyword("FROM") ?>

    <?= Code::Class("Contacts") ?>.<?= Code::Const("Companies") ?>

<?= Code::Keyword("WHERE") ?> (
        <?= Code::Field("Country") ?> = <?= Code::String("\"US\"") ?>
            
    <?= Code::Keyword("AND") ?>
            
        <?= Code::Field("Name") ?> <?= Code::Keyword("LIKE") ?> <?= Code::String("\"%Example%Corporation%\"") ?>
        
      )
<?= Code::Keyword("OR") ?>
            
    <?= Code::Field("ZipCode") ?> <?= Code::Keyword("BETWEEN") ?> <?= Code::Int("2000") ?> <?= Code::Keyword("AND") ?> <?= Code::Int("9001") ?><?= Code::Delimiter ?>
</code></pre>
</div>
<h5 id="Aliases">Aliases</h5>
<p>
    Aliases can be applied by passing a key-value-pair of the field and alias instead.
</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(
    [<?= Code::String("\"Size\"") ?> => <?= Code::String("\"Bytes\"") ?>],
    [<?= Code::String("\"CreationTime\"") ?> => <?= Code::String("\"TimeStamp\"") ?>]
)
-><?= Code::Function("From") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("Where") ?>([<?= Code::String("\"Size\"") ?> => [<?= Code::String("\">\"") ?> => <?= Code::Int("0") ?>]])<?= Code::Delimiter ?>
    </code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>
            
    <?= Code::Field("Size") ?> <?= Code::Keyword("AS") ?> <?= Code::String("`Bytes`") ?>,
    <?= Code::Field("CreationTime") ?> <?= Code::Keyword("AS") ?> <?= Code::String("`TimeStamp`") ?>
            
<?= Code::Keyword("FROM") ?>

    <?= Code::Class("Archive") ?>.<?= Code::Const("Elements") ?>

<?= Code::Keyword("WHERE") ?>

    <?= Code::Field("Size") ?> > <?= Code::Int("0") ?><?= Code::Delimiter ?>
</code></pre>
</div>
<h5 id="Joins">Joining tables</h5>
<p>
    To join the records of a different table into the resultset, the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("ISelect") ?></code>-Expression provides
    the <br>
    <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("InnerJoin") ?></code>, <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("LeftJoin") ?></code> and <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("RightJoin") ?></code>-methods which accept the name
    of the table to join.<br>
    Comparison rules can be applied through the <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("On") ?></code>-method by following the same rules of
    filtering resultsets.
</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(
    <?= Code::String("\"Attachments.Owner\"") ?>,
    <?= Code::String("\"Attachments.X\"") ?>,
    <?= Code::String("\"Attachments.Y\"") ?>,
    <?= Code::String("\"Elements.ID\"") ?>,
    <?= Code::String("\"Elements.Name\"") ?>,
    <?= Code::String("\"Elements.Type\"") ?>,
    <?= Code::String("\"Elements.Extension\"") ?>

)
-><?= Code::Function("From") ?>(<?= Code::String("\"PinBoard.Attachments\"") ?>)
-><?= Code::Function("InnerJoin") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("On") ?>([<?= Code::String("\"Elements.ID\"") ?> => <?= Code::String("\"Attachments.Element\"") ?>])
-><?= Code::Function("Where") ?>([<?= Code::String("\"Attachments.ID\"") ?> => <?= Code::Int("12") ?>])<?= Code::Delimiter ?>
</code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>
            
    <?= Code::Const("Attachments") ?>.<?= Code::Field("Owner") ?>,
    <?= Code::Const("Attachments") ?>.<?= Code::Field("X") ?>,
    <?= Code::Const("Attachments") ?>.<?= Code::Field("Y") ?>,
    <?= Code::Const("Elements") ?>.<?= Code::Field("ID") ?>,
    <?= Code::Const("Elements") ?>.<?= Code::Field("Name") ?>,
    <?= Code::Const("Elements") ?>.<?= Code::Field("Type") ?>,
    <?= Code::Const("Elements") ?>.<?= Code::Field("Extension") ?>
            
<?= Code::Keyword("FROM") ?>

    <?= Code::Class("PinBoard") ?>.<?= Code::Const("Attachments") ?>

<?= Code::Keyword("INNER JOIN") ?>

    <?= Code::Class("Archive") ?>.<?= Code::Const("Elements") ?>

<?= Code::Keyword("ON") ?>

    <?= Code::Const("Elements") ?>.<?= Code::Field("ID") ?> = <?= Code::Const("Attachments") ?>.<?= Code::Field("Element") ?>

<?= Code::Keyword("WHERE") ?>

    <?= Code::Const("Attachments") ?>.<?= Code::Field("ID") ?> = <?= Code::Int("12") ?><?= Code::Delimiter ?>
</code></pre>
</div>
<h6 id="JoinAliases">Aliases</h6>
<p>
    Aliases can be applied following the table to join.
</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"*\"") ?>)
-><?= Code::Function("From") ?>(<?= Code::String("\"Security.Groups\"") ?>)
-><?= Code::Function("InnerJoin") ?>(<?= Code::String("\"Security.GroupMemberships\"") ?>, <?= Code::String("\"Memberships\"") ?>)
-><?= Code::Function("On") ?>([
    <?= Code::String("\"Memberships.User\"") ?> => <?= Code::Int("1") ?>,
    <?= Code::String("\"Memberships.Group\"") ?> => <?= Code::String("\"Groups.ID\"") ?>
    
])<?= Code::Delimiter ?>
</code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>

    <?= Code::Field("*") ?>

<?= Code::Keyword("FROM") ?>

    <?= Code::Class("Security") ?>.<?= Code::Const("Groups") ?>

<?= Code::Keyword("INNER JOIN") ?>

    <?= Code::Class("Security") ?>.<?= Code::Const("GroupMemberships") ?> <?= Code::Keyword("AS") ?> <?= Code::String("Memberships") ?>

<?= Code::Keyword("ON") ?>

    <?= Code::String("Memberships") ?>.<?= Code::Field("User") ?> = <?= Code::Int("1") ?>,
    <?= Code::String("Memberships") ?>.<?= Code::Field("Group") ?> = <?= Code::Const("Groups") ?>.<?= Code::Field("ID") ?><?= Code::Delimiter ?>
</code></pre>
</div>
<h5 id="Union">Selecting from multiple resultsets</h5>
<p>
    To select from multiple resultsets, the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("ISelect") ?></code>-Expression provides the <br>
    <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("Union") ?></code>-method which accepts an <code class="Inline"><?= Code::Class("ISelect") ?></code>-Expression
    followed by an optional flag allowing duplicate values (UNION ALL).
</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(
    [<?= Code::Class("λ") ?>::<?= Code::Function("Max") ?>(<?= Code::String("\"Read\"") ?>), <?= Code::String("\"Read\"") ?>],
    [<?= Code::Class("λ") ?>::<?= Code::Function("Max") ?>(<?= Code::String("\"Write\"") ?>), <?= Code::String("\"Write\"") ?>],
    [<?= Code::Class("λ") ?>::<?= Code::Function("Max") ?>(<?= Code::String("\"Delete\"") ?>), <?= Code::String("\"Delete\"") ?>]
)
-><?= Code::Function("From") ?>(
    <?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"Read\"") ?>, <?= Code::String("\"Write\"") ?>, <?= Code::String("\"Delete\"") ?>)
    -><?= Code::Function("From") ?>(<?= Code::String("\"Security.AccessControlListEntries\"") ?>)
    -><?= Code::Function("InnerJoin") ?>(<?= Code::String("\"Security.GroupMemberships\"") ?>)
    -><?= Code::Function("On") ?>([<?= Code::String("\"AccessControlListEntries.Group\"") ?> => <?= Code::String("\"GroupMemberships.Group\"") ?>])
    -><?= Code::Function("Where") ?>([
        <?= Code::String("\"AccessControlListEntries.AccessControlList\"") ?> => <?= Code::Int("12") ?>,
        <?= Code::String("\"GroupMemberships.User\"") ?>                      => <?= Code::Int("2") ?>
    
    ])
    -><?= Code::Function("Union") ?>(
        <?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"Read\"") ?>, <?= Code::String("\"Write\"") ?>, <?= Code::String("\"Delete\"") ?>)
        -><?= Code::Function("From") ?>([<?= Code::String("\"Security.AccessControlListEntries\"") ?> => <?= Code::String("\"Entries\"") ?>])
        -><?= Code::Function("Where") ?>([
            <?= Code::String("\"Entries.AccessControlList\"") ?> => <?= Code::Int("12") ?>,
            <?= Code::String("\"Entries.User\"") ?>              => <?= Code::Int("2") ?>
    
        ])
    ),
     <?= Code::String("\"Permissions\"") ?>
     
)<?= Code::Delimiter ?>
</code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>
            
    <?= Code::Function("MAX") ?>(<?= Code::Field("`Read`") ?>) <?= Code::Keyword("AS") ?> <?= Code::String("`Read`") ?>,
    <?= Code::Function("MAX") ?>(<?= Code::Field("`Write`") ?>) <?= Code::Keyword("AS") ?> <?= Code::String("`Write`") ?>,
    <?= Code::Function("MAX") ?>(<?= Code::Field("`Delete`") ?>) <?= Code::Keyword("AS") ?> <?= Code::String("`Delete`") ?>
            
<?= Code::Keyword("FROM") ?> (
    <?= Code::Keyword("SELECT") ?>
            
        <?= Code::Field("`Read`") ?>, <?= Code::Field("`Write`") ?>, <?= Code::Field("`Delete`") ?>
        
    <?= Code::Keyword("FROM") ?>
        
        <?= Code::Class("Security") ?>.<?= Code::Const("AccessControlListEntries") ?>
        
    <?= Code::Keyword("INNER JOIN") ?>
        
        <?= Code::Class("Security") ?>.<?= Code::Const("GroupMemberships") ?>
        
    <?= Code::Keyword("ON") ?>
        
        <?= Code::Const("AccessControlListEntries") ?>.<?= Code::Field("`Group`") ?> = <?= Code::Const("GroupMemberships") ?>.<?= Code::Field("`Group`") ?>
        
    <?= Code::Keyword("WHERE") ?>
        
        <?= Code::Const("AccessControlListEntries") ?>.<?= Code::Field("AccessControlList") ?> = <?= Code::Int("12") ?>
        
    <?= Code::Keyword("AND") ?>
        
        <?= Code::Const("GroupMemberships") ?>.<?= Code::Field("User") ?> = <?= Code::Int("2") ?>
        
    <?= Code::Keyword("UNION SELECT") ?>
        
        <?= Code::Field("`Read`") ?>, <?= Code::Field("`Write`") ?>, <?= Code::Field("`Delete`") ?>
        
    <?= Code::Keyword("FROM") ?>
        
        <?= Code::Class("Security") ?>.<?= Code::Const("AccessControlListEntries") ?> <?= Code::Keyword("AS") ?> <?= Code::String("Entries") ?>
        
    <?= Code::Keyword("WHERE") ?>
        
        <?= Code::String("Entries") ?>.<?= Code::Field("AccessControlList") ?> = <?= Code::Int("12") ?>
        
    <?= Code::Keyword("AND") ?>
        
        <?= Code::String("Entries") ?>.<?= Code::Field("User") ?> = <?= Code::Int("2") ?>
    
) <?= Code::Keyword("AS") ?> <?= Code::String("Permissions") ?><?= Code::Delimiter ?>
</code></pre>
</div>
<hr>
<h4 id="Insert">Creating database records</h4>
<p>
    To create new records, the Expression-library provides the global <code class="Inline"><?= Code::Class("Expression") ?>::<?= Code::Function("Insert") ?>()</code>
    factory-method;<br>
    which creates a new instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("IInsert") ?></code>-Expression according the current configured
    DataProvider.
</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Insert") ?>()
-><?= Code::Function("Into") ?>(<?= Code::String("\"Security.User\"") ?>)
-><?= Code::Function("Values") ?>([
     <?= Code::String("\"ID\"") ?> => <?= Code::Null ?>,
     <?= Code::String("\"Name\"") ?> => <?= Code::String("\"Username\"") ?>
     
])<?= Code::Delimiter ?>
    </code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("INSERT INTO") ?>
            
    <?= Code::Class("Security") ?>.<?= Code::Const("User") ?>(<?= Code::Field("ID") ?>, <?= Code::Field("Name") ?>)
<?= Code::Keyword("VALUES") ?>
    
    (<?= Code::Keyword("NULL") ?>, <?= Code::String("\"Username\"") ?>)<?= Code::Delimiter ?>
</code></pre>
</div>
<h5 id="LastInsertID">Retrieving autogenerated values</h5>
<p>
    Instead of manually executing and retrieving the last autogenerated value via the <code class="Inline">\vDesk\<?= Code::Class("DataProvider") ?>::<?= Code::Function("LastInsertID") ?>()</code>-method,<br>
    calling the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("IInsert") ?>::<?= Code::Function("ID") ?>()</code>-method will immediately execute the
    Expression and retrieve the last auto generated value.
</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Variable("\$ID") ?> = <?= Code::Class("Expression") ?>::<?= Code::Function("Insert") ?>()
        -><?= Code::Function("Into") ?>(<?= Code::String("\"Table\"") ?>)
        -><?= Code::Function("Values") ?>([...])
        -><?= Code::Function("ID") ?>()<?= Code::Delimiter ?>
    </code></pre>
</div>
<hr>
<h4 id="Update">Updating database records</h4>
<p>
    To update existing records, the Expression-library provides the global <code class="Inline"><?= Code::Class("Expression") ?>::<?= Code::Function("Update") ?>()</code>
    factory-method;<br>
    which creates a new instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("IUpdate") ?></code>-Expression according the current configured
    DataProvider.
</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Update") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("Set") ?>([<?= Code::String("\"Size\"") ?> => <?= Code::Int("1337") ?>])
-><?= Code::Function("Where") ?>([<?= Code::String("\"ID\"") ?> => <?= Code::Int("29") ?>])<?= Code::Delimiter ?>
</code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("Update") ?>

    <?= Code::Class("Archive") ?>.<?= Code::Const("Elements") ?>

<?= Code::Keyword("SET") ?>

    <?= Code::Field("Size") ?> = <?= Code::Int("1337") ?>

<?= Code::Keyword("WHERE") ?>

    <?= Code::Field("ID") ?> = <?= Code::Int("29") ?><?= Code::Delimiter ?>
</code></pre>
</div>
<h5 id="ConditionalUpdate">Conditional updates</h5>
<p>
    To conveniently update a certain amount fields, a map of tuples can be passed instead to the <code class="Inline"><?= Code::Class("IUpdate") ?>::<?= Code::Function("SetIf") ?>()</code>-method.<br>
    The tuple-arrays must contain a boolean flag as the key of the desired value to set, <br>
    The fields with a true key-value will be updated; whilst the false values will be discarded.
</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Variable("\$SizeChanged") ?> = <?= Code::Bool("true") ?><?= Code::Delimiter ?>

<?= Code::Variable("\$ThumbnailChanged") ?> = <?= Code::Bool("false") ?><?= Code::Delimiter ?>


<?= Code::Class("Expression") ?>::<?= Code::Function("Update") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("SetIf") ?>([
    <?= Code::Comment("//Occurs in the UPDATE-Query") ?>

    <?= Code::String("\"Size\"") ?>      => [<?= Code::Variable("\$SizeChanged") ?> => <?= Code::Int("1337") ?>],
    <?= Code::Comment("//Gets skipped") ?>

    <?= Code::String("\"Thumbnail\"") ?> => [<?= Code::Variable("\$ThumbnailChanged") ?> =>  <?= Code::Variable("\$Thumbnail") ?>]
])
-><?= Code::Function("Where") ?>([<?= Code::String("\"ID\"") ?> => <?= Code::Variable("\$ID") ?>])<?= Code::Delimiter ?>
</code></pre>
</div>
<hr>
<h4 id="Delete">Deleting database records</h4>
<p>
    To delete existing records, the Expression-library provides the global <code class="Inline"><?= Code::Class("Expression") ?>::<?= Code::Function("Delete") ?>()</code>
    factory-method;<br>
    which creates a new instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("IDelete") ?></code>-Expression according the current configured
    DataProvider.
</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Delete") ?>()
-><?= Code::Function("From") ?>(<?= Code::String("\"Calendar.Events\"") ?>)
-><?= Code::Function("Where") ?>([<?= Code::String("\"ID\"") ?> => <?= Code::Int("37") ?>])<?= Code::Delimiter ?>
</code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("DELETE") ?> <?= Code::Keyword("FROM") ?>

    <?= Code::Class("Calendar") ?>.<?= Code::Const("Events") ?>

<?= Code::Keyword("WHERE") ?>

    <?= Code::Field("ID") ?> = <?= Code::Int("37") ?><?= Code::Delimiter ?>
</code></pre>
</div>

<hr>
<h3 id="Create">Creating databases and tables</h3>
<p>
    To create new databases and tables, the Expression-library provides the global <code class="Inline">Expression::<?= Code::Class("Create") ?></code> factory-method;<br>
    which creates a new instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("ICreate") ?></code>-Expression according the current configured
    DataProvider.
</p>
<h4 id="CreateDatabase">Database</h4>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Create") ?>()
-><?= Code::Function("Database") ?>(<?= Code::String("\"Messenger\"") ?>)<?= Code::Delimiter ?>
</code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("CREATE") ?> <?= Code::Keyword("DATABASE") ?>

   <?= Code::Class("Messenger") ?><?= Code::Delimiter ?>
</code></pre>
</div>
<h4 id="CreateTable">Table</h4>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Create") ?>()
-><?= Code::Function("Table") ?>(
    <?= Code::String("\"Messenger.Messages\"") ?>,
    [
        <?= Code::String("\"ID\"") ?>        => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("BigInt") ?> | <?= Code::Class("Type") ?>::<?= Code::Const("Unsigned") ?>, <?= Code::String("\"Autoincrement\"") ?> => <?= Code::Bool("true") ?>],
        <?= Code::String("\"Sender\"") ?>    => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("BigInt") ?> | <?= Code::Class("Type") ?>::<?= Code::Const("Unsigned") ?>, <?= Code::String("\"Nullable\"") ?> => <?= Code::Bool("true") ?>],
        <?= Code::String("\"Recipient\"") ?> => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("BigInt") ?> | <?= Code::Class("Type") ?>::<?= Code::Const("Unsigned") ?>, <?= Code::String("\"Default\"") ?> => <?= Code::Int("42") ?>],
        <?= Code::String("\"Status\"") ?>    => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("TinyInt") ?> | <?= Code::Class("Type") ?>::<?= Code::Const("Unsigned") ?>, <?= Code::String("\"Size\"") ?> => <?= Code::Int("2") ?>],
        <?= Code::String("\"Date\"") ?>      => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("DateTime") ?>],
        <?= Code::String("\"Text\"") ?>      => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("Text") ?>, <?= Code::String("\"Collation\"") ?> => <?= Code::Class("Collation") ?>::<?= Code::Const("UTF8") ?>]
    ],
    [
        <?= Code::String("\"Primary\"") ?>   => [<?= Code::String("\"Fields\"") ?> => [<?= Code::String("\"ID\"") ?>, <?= Code::String("\"Sender\"") ?>, <?= Code::String("\"Recipient\"") ?>, <?= Code::String("\"Status\"") ?>, <?= Code::String("\"Date\"") ?>]]
    ]
)<?= Code::Delimiter ?>
</code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("CREATE") ?> <?= Code::Keyword("TABLE") ?>
            
    <?= Code::Class("Messenger") ?>.<?= Code::Const("Messages") ?> (
        <?= Code::Field("ID") ?> <?= Code::Keyword("BIGINT") ?> <?= Code::Keyword("UNSIGNED") ?> <?= Code::Keyword("AUTO_INCREMENT") ?> <?= Code::Keyword("NOT NULL") ?>,
        <?= Code::Field("Sender") ?> <?= Code::Keyword("BIGINT") ?> <?= Code::Keyword("UNSIGNED") ?> <?= Code::Keyword("NULL") ?>,
        <?= Code::Field("Recipient") ?> <?= Code::Keyword("BIGINT") ?> <?= Code::Keyword("UNSIGNED") ?> <?= Code::Keyword("NOT NULL") ?> <?= Code::Keyword("DEFAULT") ?> <?= Code::Int("42") ?>,
        <?= Code::Field("Status") ?> <?= Code::Keyword("TINYINT") ?>(<?= Code::Int("2") ?>) <?= Code::Keyword("UNSIGNED") ?> <?= Code::Keyword("NOT NULL") ?>,
        <?= Code::Field("Date") ?> <?= Code::Keyword("DATETIME") ?> <?= Code::Keyword("NOT NULL") ?>,
        <?= Code::Field("Text") ?> <?= Code::Keyword("TEXT") ?> <?= Code::Keyword("COLLATE") ?> <?= Code::String("utf8mb4_unicode_ci") ?> <?= Code::Keyword("NOT NULL") ?>,
        <?= Code::Keyword("PRIMARY KEY") ?>(<?= Code::Field("ID") ?>, <?= Code::Field("Sender") ?>, <?= Code::Field("Recipient") ?>, <?= Code::Field("Status") ?>, <?= Code::Field("Date") ?>)
)<?= Code::Delimiter ?>
</code></pre>
</div>
<hr>
<h3 id="Alter">Updating tables</h3>
<p>
    To update existing tables, the Expression-library provides the global <code class="Inline">Expression::<?= Code::Class("Alter") ?></code> factory-method;<br>
    which creates a new instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("IAlter") ?></code>-Expression according the current configured
    DataProvider.
</p>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Alter") ?>()
-><?= Code::Function("Table") ?>(<?= Code::String("\"Messenger.Messages\"") ?>)
-><?= Code::Function("Add") ?>(
    [<?= Code::String("\"ID\"") ?>    => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("BigInt") ?> | <?= Code::Class("Type") ?>::<?= Code::Const("Unsigned") ?> , <?= Code::String("\"Autoincrement\"") ?> => <?= Code::Bool("true") ?>]],
    [<?= Code::String("\"Conversation\"") ?> => [<?= Code::String("\"Unique\"") ?> => <?= Code::Bool("true") ?>,<?= Code::String("\"Fields\"") ?> => [<?= Code::String("\"ID\"") ?>, <?= Code::String("\"Sender\"") ?>, <?= Code::String("\"Recipient\"") ?>]]]
)
-><?= Code::Function("Modify") ?>(
    [<?= Code::String("\"Text\"") ?>  => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("TinyText") ?>, <?= Code::String("\"Collation\"") ?> => <?= Code::Class("Collation") ?>::<?= Code::Const("ASCII") ?>]],
    [<?= Code::String("\"Index\"") ?> => [<?= Code::String("\"Fields\"") ?> => [<?= Code::String("\"ID\"") ?>, <?= Code::String("\"Sender\"") ?>, <?= Code::String("\"Recipient\"") ?>, <?= Code::String("\"Status\"") ?>, <?= Code::String("\"Date\"") ?>]]]
)
-><?= Code::Function("Rename") ?>([<?= Code::String("\"Hello\"") ?> => <?= Code::String("\"World\"") ?>])
-><?= Code::Function("Drop") ?>(
    [<?= Code::String("\"Date\"") ?>],
    [<?= Code::String("\"Conversation\"") ?>]
)<?= Code::Delimiter ?>
</code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("ALTER TABLE") ?>
            
    <?= Code::Class("Messenger") ?>.<?= Code::Const("Messages") ?>
    
<?= Code::Keyword("ADD COLUMN") ?> <?= Code::Field("ID") ?> <?= Code::Keyword("BIGINT") ?> <?= Code::Keyword("UNSIGNED") ?> <?= Code::Keyword("NOT NULL") ?> <?= Code::Keyword("AUTO_INCREMENT") ?>,
<?= Code::Keyword("ADD UNIQUE INDEX") ?> <?= Code::Field("Conversation") ?>(<?= Code::Field("ID") ?>, <?= Code::Field("Sender") ?>, <?= Code::Field("Recipient") ?>),

<?= Code::Keyword("ALTER COLUMN") ?> <?= Code::Field("Text") ?> <?= Code::Keyword("TINYTEXT") ?> <?= Code::Keyword("NOT NULL") ?> <?= Code::Keyword("COLLATE") ?> <?= Code::String("ascii_general_ci") ?>,
<?= Code::Keyword("ALTER INDEX") ?> <?= Code::Field("Index") ?>(<?= Code::Field("ID") ?>, <?= Code::Field("Sender") ?>, <?= Code::Field("Recipient") ?>, <?= Code::Field("Status") ?>, <?= Code::Field("Date") ?>),

<?= Code::Keyword("RENAME COLUMN") ?> <?= Code::Field("Hello") ?> <?= Code::Keyword("TO") ?> <?= Code::Field("World") ?>,

<?= Code::Keyword("DROP COLUMN") ?> <?= Code::Field("Date") ?>,
<?= Code::Keyword("DROP INDEX") ?> <?= Code::Field("Conversation") ?><?= Code::Delimiter ?>
</code></pre>
</div>
<hr>
<h3 id="Drop">Deleting databases and tables</h3>
<p>
    To delete databases and tables, the Expression-library provides the global <code class="Inline">Expression::<?= Code::Class("Drop") ?></code> factory-method;
    which creates a new instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("IDrop") ?></code>-Expression according the current configured
    DataProvider.
</p>
<h4 id="DropDatabase">Database</h4>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Drop") ?>()
-><?= Code::Function("Database") ?>(<?= Code::String("\"Messenger\"") ?>)<?= Code::Delimiter ?>
</code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("DROP") ?> <?= Code::Keyword("DATABASE") ?>

    <?= Code::Class("Messenger") ?><?= Code::Delimiter ?>
</code></pre>
</div>
<h4 id="DropTable">Table</h4>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Drop") ?>()
-><?= Code::Function("Table") ?>(<?= Code::String("\"Messenger.Messages\"") ?>)<?= Code::Delimiter ?>
</code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("DROP") ?> <?= Code::Keyword("TABLE") ?>
            
    <?= Code::Class("Messenger") ?>.<?= Code::Const("Messages") ?><?= Code::Delimiter ?>
</code></pre>
</div>