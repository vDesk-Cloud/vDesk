<?php
use vDesk\Documentation\Code;
?>
<article>
    <header>
        <h2>Database-Expressions</h2>
        <p>
            This tutorial describes working with databases using vDesk's "Expression"-library.<br>
        </p>
        <h3>Overview</h3>
        <ul class="Topics">
            <li>
                <a href="#Expressions">Expressions</a>
                <ul class="Topics">
                    <li><a href="#Comparison">Comparison between different DataProviders</a></li>
                    <li><a href="#Resultsets">Result sets</a></li>
                </ul>
            </li>
            <li>
                <a href="#Functions">Functions</a>
                <ul class="Topics">
                    <li><a href="#SupportedFunctions">Supported Functions</a></li>
                </ul>
            </li>
            <li>
                <a href="#DatabaseRecords">Database records</a>
                <ul class="Topics">
                    <li><a href="#Filtering">Filtering records</a></li>
                    <li>
                        <a href="#Select">Selecting database records</a>
                        <ul class="Topics">
                            <li><a href="#Aliases">Aliases</a></li>
                            <li>
                                <a href="#Joins">Joining tables</a>
                                <ul class="Topics">
                                    <li><a href="#JoinAliases">Aliases</a></li>
                                </ul>
                            </li>
                            <li><a href="#Union">Selecting from multiple resultsets</a></li>
                        </ul>
                    </li>
                    <li>
                        <a href="#Insert">Creating database records</a>
                        <ul class="Topics">
                            <li><a href="#LastInsertID">Retrieving autogenerated values</li>
                        </ul>
                    </li>
                    <li>
                        <a href="#Update">Updating database records</a>
                        <ul class="Topics">
                            <li><a href="#ConditionalUpdate">Conditional updates</a></li>
                        </ul>
                    </li>
                    <li>
                        <a href="#Delete">Deleting database records</a>
                    </li>
                </ul>
            </li>
            <li>
                <a href="#Create">Creating databases, schemas and tables</a>
                <ul class="Topics">
                    <li><a href="#CreateDatabase">Databases</a></li>
                    <li><a href="#CreateSchema">Schemas</a></li>
                    <li><a href="#CreateTable">Tables</a></li>
                    <li><a href="#CreateIndex">Indices</a></li>
                </ul>
            </li>
            <li>
                <a href="#Alter">Updating databases, schemas and tables</a>
                <ul class="Topics">
                    <li><a href="#AlterDatabase">Databases</a></li>
                    <li><a href="#AlterSchema">Schemas</a></li>
                    <li><a href="#AlterTable">Tables</a></li>
                    <li><a href="#AlterIndex">Indices</a></li>
                </ul>
            </li>
            <li>
                <a href="#Drop">Deleting databases, schemas and tables</a>
                <ul class="Topics">
                    <li><a href="#DropDatabase">Databases</a></li>
                    <li><a href="#DropSchema">Schemas</a></li>
                    <li><a href="#DropTable">Tables</a></li>
                    <li><a href="#DropIndex">Indices</a></li>
                </ul>
            </li>
        </ul>
    </header>
<hr>
    <section id="Expressions">
        <h3>Expressions</h3>
        <p>
            Besides querying manually the database via passing plain SQL-strings through the <code class="Inline">\vDesk\<?= Code::Class("DataProvider") ?>::<?= Code::Function("Execute") ?>()</code>-method,<br>
            vDesk ships with a library that provides an "expressive" way of working with databases.
        </p>
        <p>
            Expressions are early evaluated fluent interfaces which aim to provide a transformation of the usual well known SQL syntax into an unified injection-safe PHP-API
            that cares about proper value escaping and building SQL statements compatible to the current configured database.<br>
        </p>
        <p>
            To reduce the required effort of writing code, the Expression library provides a global <code class="Inline">\vDesk\DataProvider\<?= Code::Class("Expression") ?></code>-factory, that creates specific Expression-instances according the current configured DataProvider.<br>
        </p>
        <aside class="Note">
            <h4>Note</h4>
            <p>
                Independent of the specific implementation, any Expression instance will use the escaping methods of the current DataProvider-instance.<br>
                For subsequent calls to different target RDBMS, the global DataProvider interface has to be manually re-initialized via invoking it's constructor before executing the Expression.
            </p>
        </aside>
    </section>
    <section id="Comparison">
        <h4>Comparison between different DataProviders</h4>
        <p>
            While simple CRUD-operations don't differ between all major SQL databases, except for MySQL's lack of full outer joins, <br>
            the most problematic thing to conquer was how each RDBMS handles creation and alternation of databases/schemas, tables and columns.
        </p>
        <h5>Full outer join</h5>
        <p>
            The MySQL provider will fall back to a union select between a left- and a right join.
        </p>
        <h5>Autoincrement columns</h5>
        <p>
            The system has been initially developed on a MySQL server, using null values for generating IDs and columns with default values.<br>
            The PgSQL and MsSQL providers currently assumes the first field identifier as an identity column if it's name ends with an "ID" suffix.
        </p>
        <p>
            In case of the PgSQL provider, null-values will be replaced with "DEFAULT", while the MsSQL provider will omit the column entirely.
        </p>
        <h5>Default values</h5>
        <p>
            The escaping methods of the PgSQL and MsSQL providers currently ignore any strings containing the value "DEFAULT". <br>
            Until the system isn't completely aware of default values, the MySQL provider relies on null values instead.
        </p>
        <h5>Schemas</h5>
        <p>
            As of MySQL's lack of schema support, the according provider will invalidate any database creation or modification attempts while providing the desired functionality through the schema related methods to keep compatibility to different providers.<br>
            The MsSQL provider currently doesn't support renaming of schemas - this would require querying the master database and copying over the schema-objects to a new schema while dropping the old one afterwards.
        </p>
        <h5>Tables</h5>
        <p>
            While the MySQL version of the "CREATE/ALTER TABLE" statement is rather a simple enumeration of sub-statements,
            Postgres and SQL servers require a bit more workarounds to achieve the same syntax.<br>
            The PgSQL and MsSQL providers will append any index creation or modification in a separate list of SQL statements to the final Expression while dropped indices will get prepended.<br>
            Updating tables using the MsSQL provider will result in a whole list of separate SQL statements for each modification.
        </p>
    </section>
    <section id="Resultsets">
        <h4>Result sets</h4>
        <p>
            To execute an Expression and retrieve it's result set, an Expression has to be finished with a call to the <code
                    class="Inline">\vDesk\DataProvider\<?= Code::Class("IExpression") ?>::<?= Code::Function("Execute") ?>()</code>-method in its call-chain.
        </p>
        <p>
            The manual execution and retrieval of the result set can be skipped by simply directly iterating over an Expression; this will immediately execute the Expression and the
            result set it yields will be used for the iterator.<br>
            Iterating over a result set, will yield the value of calling the <code class="Inline">\vDesk\DataProvider\<?= Code::Class("IResult") ?>::<?= Code::Function("ToMap") ?>()</code>-method
            on each row of the result.
        </p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::ForEach ?>(
    <?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"Name\"") ?>, <?= Code::String("\"Price\"") ?>)
              -><?= Code::Function("From") ?>(<?= Code::String("\"Products\"") ?>)
              -><?= Code::Function("Where") ?>([<?= Code::String("\"Price\"") ?> => [<?= Code::String("\">\"") ?> => <?= Code::Int("20.3") ?>]])
    <?= Code::Keyword("as") ?>
        
        <?= Code::Variable("\$Product") ?>

) {
    <?= Code::Keyword("echo") ?> <?= Code::String("\"Product: ") ?>{<?= Code::Variable("\$Product") ?>[<?= Code::String("\"Name\"") ?>]}<?= Code::String(", Price: ") ?>{<?= Code::Variable("\$Product") ?>[<?= Code::String("\"Price\"") ?>]}<?= Code::String("\$.\"") ?><?= Code::Delimiter ?>

}</code></pre>
        </div>
        <p>
            Single values can be retrieved by invoking the Expression as a function which executes it and calls the <code class="Inline">\vDesk\DataProvider\<?= Code::Class("IResult") ?>::<?= Code::Function("ToValue") ?>()</code>-method on its resultset.
        </p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Variable("\$ID") ?> = <?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"ID\"") ?>)
-><?= Code::Function("From") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("Where") ?>([<?= Code::String("\"Name\"") ?> => <?= Code::String("\"Example\"") ?>])()<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"ID\"") ?>)
-><?= Code::Function("From") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("Where") ?>([<?= Code::String("\"Name\"") ?> => <?= Code::String("\"Example\"") ?>])
-><?= Code::Function("Execute") ?>()
-><?= Code::Function("ToValue") ?>()<?= Code::Delimiter ?>
    </code></pre>
        </div>
    </section>
    <section id="Functions">
        <h3>Functions</h3>
        <p>
            The Expression-library provides an abstract interface for applying aggregate-functions<br>
            via the global <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("Functions") ?></code>- and <code
                    class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("λ") ?></code>-factories.
        </p>
        <p>
            Aggregate-functions are represented as an instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("IAggregateFunction") ?></code>-interface.<br>
            If an aggregate-function isn't supported by the current configured DataProvider, the <code
                    class="Inline">\vDesk\DataProvider\Expression\Functions\<?= Code::Class("Generic") ?></code>-class will be used as fallback.
        </p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(
    <?= Code::Class("Functions") ?>::<?= Code::Function("Max") ?>(<?= Code::String("\"Size\"") ?>),
    [<?= Code::Class("λ") ?>::<?= Code::Function("Count") ?>(<?= Code::String("\"*\"") ?>), <?= Code::String("\"Amount\"") ?>]
)
-><?= Code::Function("From") ?>(<?= Code::String("\"Archive.Elements\"") ?>)<?= Code::Delimiter ?>
    </code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>
            
    <?= Code::Function("MAX") ?>(<?= Code::Field("Size") ?>),
    <?= Code::Function("COUNT") ?>(<?= Code::Field("*") ?>) <?= Code::Keyword("AS") ?> <?= Code::String("`Amount`") ?>
            
<?= Code::Keyword("FROM") ?>
            
    <?= Code::Class("Archive") ?>.<?= Code::Const("Elements") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="SupportedFunctions">
        <h4>Supported Functions</h4>
        <p>The following table represents an enumeration of "natively" supported Aggregate-functions.</p>
        <table>
            <tr>
                <th>Function</th>
                <th>MySQL</th>
                <th>MSSQL</th>
                <th>PgSQL</th>
            </tr>
            <tr>
                <td>AVG</td>
                <td>✓</td>
                <td>✗</td>
                <td>✗</td>
            </tr>
            <tr>
                <td>COUNT</td>
                <td>✓</td>
                <td>✗</td>
                <td>✗</td>
            </tr>
            <tr>
                <td>CURRENT_TIMESTAMP</td>
                <td>✓</td>
                <td>✗</td>
                <td>✗</td>
            </tr>
            <tr>
                <td>DISTINCT</td>
                <td>✓</td>
                <td>✗</td>
                <td>✗</td>
            </tr>
            <tr>
                <td>MAX</td>
                <td>✓</td>
                <td>✗</td>
                <td>✗</td>
            </tr>
            <tr>
                <td>MIN</td>
                <td>✓</td>
                <td>✗</td>
                <td>✗</td>
            </tr>
            <tr>
                <td>NOW</td>
                <td>✓</td>
                <td>✗</td>
                <td>✗</td>
            </tr>
            <tr>
                <td>SUM</td>
                <td>✓</td>
                <td>✗</td>
                <td>✗</td>
            </tr>
            <tr>
                <td>GROUP_CONCAT</td>
                <td>✗</td>
                <td>✗</td>
                <td>✗</td>
            </tr>
        </table>
    </section>
    <section id="DatabaseRecords">
        <h3>Database records</h3>
    </section>
    <section id="Filtering">
        <h4>Filtering records</h4>
        <p>
            To filter records, the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("ISelect") ?></code>-, <code class="Inline"><?= Code::Class("IUpdate") ?></code> and
            <code class="Inline"><?= Code::Class("IDelete") ?></code>-Expressions provide the
            <code class="Inline"><?= Code::Class("IExpression") ?>::<?= Code::Function("Where") ?></code>-method which accepts a map of filtering conditions.
        </p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"*\"") ?>)
-><?= Code::Function("From") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("Where") ?>([
    <?= Code::String("\"ID\"") ?> => [<?= Code::String("\"IN\"") ?> => [<?= Code::Int("1") ?>, <?= Code::Int("2") ?>, <?= Code::Int("3") ?>]],
    <?= Code::String("\"Name\"") ?> => [<?= Code::String("\"LIKE\"") ?> => <?= Code::String("\"%invoice%\"") ?>],
    <?= Code::String("\"Extension\"") ?> => <?= Code::String("\"pdf\"") ?>,
    <?= Code::String("\"Size\"") ?> => [<?= Code::String("\"BETWEEN\"") ?> => [<?= Code::Int("1024") ?>, <?= Code::Int("4096") ?>]],
    <?= Code::String("\"CreationTime\"") ?> => [<?= Code::String("\"<\"") ?> => <?= Code::Class("λ") ?>::<?= Code::Function("CurrentTimestamp") ?>()]
])<?= Code::Delimiter ?>
    </code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>
            
    <?= Code::Field("*") ?>
            
<?= Code::Keyword("FROM") ?>

    <?= Code::Class("Archive") ?>.<?= Code::Const("Elements") ?>

<?= Code::Keyword("WHERE") ?>

    <?= Code::Field("ID") ?> = <?= Code::Keyword("IN") ?> (<?= Code::Int("1") ?>, <?= Code::Int("2") ?>, <?= Code::Int("3") ?>)
<?= Code::Keyword("AND") ?>
            
    <?= Code::Field("Name") ?> <?= Code::Keyword("LIKE") ?> <?= Code::String("\"%invoice%\"") ?>
    
<?= Code::Keyword("AND") ?>

    <?= Code::Field("Extension") ?> = <?= Code::String("\"pdf\"") ?>

<?= Code::Keyword("AND") ?>

    <?= Code::Field("Size") ?> <?= Code::Keyword("BETWEEN") ?> <?= Code::Int("1024") ?> <?= Code::Keyword("AND") ?> <?= Code::Int("4096") ?>

<?= Code::Keyword("AND") ?>

    <?= Code::Field("CreationTime") ?> < <?= Code::Const("CURRENT_TIMESTAMP") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
        <p>Alternative conditions can be applied by passing further arrays of conditions.</p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"*\"") ?>)
-><?= Code::Function("From") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("Where") ?>(
    [
        <?= Code::String("\"Name\"") ?> => [<?= Code::String("\"LIKE\"") ?> => <?= Code::String("\"%invoice%\"") ?>],
    ],
    [
        <?= Code::String("\"Extension\"") ?> => <?= Code::String("\"pdf\"") ?>,
        <?= Code::String("\"CreationTime\"") ?> => [<?= Code::String("\"<\"") ?> => <?= Code::Class("λ") ?>::<?= Code::Function("CurrentTimestamp") ?>()]
    ]
)<?= Code::Delimiter ?>
    </code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>

    <?= Code::Field("*") ?>

<?= Code::Keyword("FROM") ?>

    <?= Code::Class("Archive") ?>.<?= Code::Const("Elements") ?>

<?= Code::Keyword("WHERE") ?>

    <?= Code::Field("Name") ?> <?= Code::Keyword("LIKE") ?> <?= Code::String("\"%invoice%\"") ?>

<?= Code::Keyword("OR") ?> (
        <?= Code::Field("Extension") ?> = <?= Code::String("\"pdf\"") ?>
            
    <?= Code::Keyword("AND") ?>
            
        <?= Code::Field("CreationTime") ?> < <?= Code::Const("CURRENT_TIMESTAMP") ?>
        
)<?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="Select">
        <h4>Selecting database records</h4>
        <p>
            To query, filter and retrieve any records from the database, the Expression-library provides the global <code
                    class="Inline">\vDesk\DataProvider\<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>()</code> factory-method;<br>
            which creates a new instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("ISelect") ?></code>-Expression according the current configured
            DataProvider.
        </p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"*\"") ?>)
-><?= Code::Function("From") ?>(<?= Code::String("\"Contacts.Companies\"") ?>)
-><?= Code::Function("Where") ?>([
    <?= Code::String("\"Country\"") ?> => <?= Code::String("\"US\"") ?>,
    <?= Code::String("\"Name\"") ?>    => [<?= Code::String("\"LIKE\"") ?> => <?= Code::String("\"%Example%Corporation%\"") ?>]
    ],
    [<?= Code::String("\"ZipCode\"") ?> => [<?= Code::String("\"BETWEEN\"") ?> => [<?= Code::Int("2000") ?>, <?= Code::Int("9001") ?>]]]
)<?= Code::Delimiter ?>
    
    </code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>

    <?= Code::Field("*") ?>

<?= Code::Keyword("FROM") ?>

    <?= Code::Class("Contacts") ?>.<?= Code::Const("Companies") ?>

<?= Code::Keyword("WHERE") ?> (
        <?= Code::Field("Country") ?> = <?= Code::String("\"US\"") ?>
            
    <?= Code::Keyword("AND") ?>
            
        <?= Code::Field("Name") ?> <?= Code::Keyword("LIKE") ?> <?= Code::String("\"%Example%Corporation%\"") ?>
        
      )
<?= Code::Keyword("OR") ?>
            
    <?= Code::Field("ZipCode") ?> <?= Code::Keyword("BETWEEN") ?> <?= Code::Int("2000") ?> <?= Code::Keyword("AND") ?> <?= Code::Int("9001") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="Aliases">
        <h5>Aliases</h5>
        <p>
            Aliases can be applied by passing a key-value-pair of the field and alias instead.
        </p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(
    [<?= Code::String("\"Size\"") ?> => <?= Code::String("\"Bytes\"") ?>],
    [<?= Code::String("\"CreationTime\"") ?> => <?= Code::String("\"TimeStamp\"") ?>]
)
-><?= Code::Function("From") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("Where") ?>([<?= Code::String("\"Size\"") ?> => [<?= Code::String("\">\"") ?> => <?= Code::Int("0") ?>]])<?= Code::Delimiter ?>
    </code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>
            
    <?= Code::Field("Size") ?> <?= Code::Keyword("AS") ?> <?= Code::String("`Bytes`") ?>,
    <?= Code::Field("CreationTime") ?> <?= Code::Keyword("AS") ?> <?= Code::String("`TimeStamp`") ?>
            
<?= Code::Keyword("FROM") ?>

    <?= Code::Class("Archive") ?>.<?= Code::Const("Elements") ?>

<?= Code::Keyword("WHERE") ?>

    <?= Code::Field("Size") ?> > <?= Code::Int("0") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="Joins">
        <h5>Joining tables</h5>
        <p>
            To join the records of a different table into the resultset, the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("ISelect") ?></code>-Expression provides
            the <br>
            <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("InnerJoin") ?></code>, <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("LeftJoin") ?></code>, <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("RightJoin") ?></code> and <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("FullJoin") ?></code>-methods which accept the name
            of the table to join.<br>
            Comparison rules can be applied through the <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("On") ?></code>-method by following the same rules of
            filtering result sets.
        </p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(
    <?= Code::String("\"Attachments.Owner\"") ?>,
    <?= Code::String("\"Attachments.X\"") ?>,
    <?= Code::String("\"Attachments.Y\"") ?>,
    <?= Code::String("\"Elements.ID\"") ?>,
    <?= Code::String("\"Elements.Name\"") ?>,
    <?= Code::String("\"Elements.Type\"") ?>,
    <?= Code::String("\"Elements.Extension\"") ?>

)
-><?= Code::Function("From") ?>(<?= Code::String("\"PinBoard.Attachments\"") ?>)
-><?= Code::Function("InnerJoin") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("On") ?>([<?= Code::String("\"Elements.ID\"") ?> => <?= Code::String("\"Attachments.Element\"") ?>])
-><?= Code::Function("Where") ?>([<?= Code::String("\"Attachments.ID\"") ?> => <?= Code::Int("12") ?>])<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>
            
    <?= Code::Const("Attachments") ?>.<?= Code::Field("Owner") ?>,
    <?= Code::Const("Attachments") ?>.<?= Code::Field("X") ?>,
    <?= Code::Const("Attachments") ?>.<?= Code::Field("Y") ?>,
    <?= Code::Const("Elements") ?>.<?= Code::Field("ID") ?>,
    <?= Code::Const("Elements") ?>.<?= Code::Field("Name") ?>,
    <?= Code::Const("Elements") ?>.<?= Code::Field("Type") ?>,
    <?= Code::Const("Elements") ?>.<?= Code::Field("Extension") ?>
            
<?= Code::Keyword("FROM") ?>

    <?= Code::Class("PinBoard") ?>.<?= Code::Const("Attachments") ?>

<?= Code::Keyword("INNER JOIN") ?>

    <?= Code::Class("Archive") ?>.<?= Code::Const("Elements") ?>

<?= Code::Keyword("ON") ?>

    <?= Code::Const("Elements") ?>.<?= Code::Field("ID") ?> = <?= Code::Const("Attachments") ?>.<?= Code::Field("Element") ?>

<?= Code::Keyword("WHERE") ?>

    <?= Code::Const("Attachments") ?>.<?= Code::Field("ID") ?> = <?= Code::Int("12") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
        <aside class="Note">
            <h4>Note</h4>
            <p>
                Calling <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("FullJoin") ?>()</code> while using the MySQL DataProvider<br>
                will cause a fallback to a <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("Union") ?>()</code>-select between a <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("LeftJoin") ?>()</code> and a <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("RightJoin") ?>()</code>.
            </p>
        </aside>
    </section>
    <section id="JoinAliases">
        <h6>Aliases</h6>
        <p>
            Aliases can be applied following the table to join.
        </p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"*\"") ?>)
-><?= Code::Function("From") ?>(<?= Code::String("\"Security.Groups\"") ?>)
-><?= Code::Function("InnerJoin") ?>(<?= Code::String("\"Security.GroupMemberships\"") ?>, <?= Code::String("\"Memberships\"") ?>)
-><?= Code::Function("On") ?>([
    <?= Code::String("\"Memberships.User\"") ?> => <?= Code::Int("1") ?>,
    <?= Code::String("\"Memberships.Group\"") ?> => <?= Code::String("\"Groups.ID\"") ?>
    
])<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>

    <?= Code::Field("*") ?>

<?= Code::Keyword("FROM") ?>

    <?= Code::Class("Security") ?>.<?= Code::Const("Groups") ?>

<?= Code::Keyword("INNER JOIN") ?>

    <?= Code::Class("Security") ?>.<?= Code::Const("GroupMemberships") ?> <?= Code::Keyword("AS") ?> <?= Code::String("Memberships") ?>

<?= Code::Keyword("ON") ?>

    <?= Code::String("Memberships") ?>.<?= Code::Field("User") ?> = <?= Code::Int("1") ?>,
    <?= Code::String("Memberships") ?>.<?= Code::Field("Group") ?> = <?= Code::Const("Groups") ?>.<?= Code::Field("ID") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="Union">
        <h5>Selecting from multiple resultsets</h5>
        <p>
            To select from multiple resultsets, the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("ISelect") ?></code>-Expression provides the <br>
            <code class="Inline"><?= Code::Class("ISelect") ?>::<?= Code::Function("Union") ?></code>-method which accepts an <code class="Inline"><?= Code::Class("ISelect") ?></code>-Expression
            followed by an optional flag allowing duplicate values (UNION ALL).
        </p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(
    [<?= Code::Class("λ") ?>::<?= Code::Function("Max") ?>(<?= Code::String("\"Read\"") ?>), <?= Code::String("\"Read\"") ?>],
    [<?= Code::Class("λ") ?>::<?= Code::Function("Max") ?>(<?= Code::String("\"Write\"") ?>), <?= Code::String("\"Write\"") ?>],
    [<?= Code::Class("λ") ?>::<?= Code::Function("Max") ?>(<?= Code::String("\"Delete\"") ?>), <?= Code::String("\"Delete\"") ?>]
)
-><?= Code::Function("From") ?>(
    <?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"Read\"") ?>, <?= Code::String("\"Write\"") ?>, <?= Code::String("\"Delete\"") ?>)
    -><?= Code::Function("From") ?>(<?= Code::String("\"Security.AccessControlListEntries\"") ?>)
    -><?= Code::Function("InnerJoin") ?>(<?= Code::String("\"Security.GroupMemberships\"") ?>)
    -><?= Code::Function("On") ?>([<?= Code::String("\"AccessControlListEntries.Group\"") ?> => <?= Code::String("\"GroupMemberships.Group\"") ?>])
    -><?= Code::Function("Where") ?>([
        <?= Code::String("\"AccessControlListEntries.AccessControlList\"") ?> => <?= Code::Int("12") ?>,
        <?= Code::String("\"GroupMemberships.User\"") ?>                      => <?= Code::Int("2") ?>
    
    ])
    -><?= Code::Function("Union") ?>(
        <?= Code::Class("Expression") ?>::<?= Code::Function("Select") ?>(<?= Code::String("\"Read\"") ?>, <?= Code::String("\"Write\"") ?>, <?= Code::String("\"Delete\"") ?>)
        -><?= Code::Function("From") ?>([<?= Code::String("\"Security.AccessControlListEntries\"") ?> => <?= Code::String("\"Entries\"") ?>])
        -><?= Code::Function("Where") ?>([
            <?= Code::String("\"Entries.AccessControlList\"") ?> => <?= Code::Int("12") ?>,
            <?= Code::String("\"Entries.User\"") ?>              => <?= Code::Int("2") ?>
    
        ])
    ),
     <?= Code::String("\"Permissions\"") ?>
     
)<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("SELECT") ?>
            
    <?= Code::Function("MAX") ?>(<?= Code::Field("`Read`") ?>) <?= Code::Keyword("AS") ?> <?= Code::String("`Read`") ?>,
    <?= Code::Function("MAX") ?>(<?= Code::Field("`Write`") ?>) <?= Code::Keyword("AS") ?> <?= Code::String("`Write`") ?>,
    <?= Code::Function("MAX") ?>(<?= Code::Field("`Delete`") ?>) <?= Code::Keyword("AS") ?> <?= Code::String("`Delete`") ?>
            
<?= Code::Keyword("FROM") ?> (
    <?= Code::Keyword("SELECT") ?>
            
        <?= Code::Field("`Read`") ?>, <?= Code::Field("`Write`") ?>, <?= Code::Field("`Delete`") ?>
        
    <?= Code::Keyword("FROM") ?>
        
        <?= Code::Class("Security") ?>.<?= Code::Const("AccessControlListEntries") ?>
        
    <?= Code::Keyword("INNER JOIN") ?>
        
        <?= Code::Class("Security") ?>.<?= Code::Const("GroupMemberships") ?>
        
    <?= Code::Keyword("ON") ?>
        
        <?= Code::Const("AccessControlListEntries") ?>.<?= Code::Field("`Group`") ?> = <?= Code::Const("GroupMemberships") ?>.<?= Code::Field("`Group`") ?>
        
    <?= Code::Keyword("WHERE") ?>
        
        <?= Code::Const("AccessControlListEntries") ?>.<?= Code::Field("AccessControlList") ?> = <?= Code::Int("12") ?>
        
    <?= Code::Keyword("AND") ?>
        
        <?= Code::Const("GroupMemberships") ?>.<?= Code::Field("User") ?> = <?= Code::Int("2") ?>
        
    <?= Code::Keyword("UNION SELECT") ?>
        
        <?= Code::Field("`Read`") ?>, <?= Code::Field("`Write`") ?>, <?= Code::Field("`Delete`") ?>
        
    <?= Code::Keyword("FROM") ?>
        
        <?= Code::Class("Security") ?>.<?= Code::Const("AccessControlListEntries") ?> <?= Code::Keyword("AS") ?> <?= Code::String("Entries") ?>
        
    <?= Code::Keyword("WHERE") ?>
        
        <?= Code::String("Entries") ?>.<?= Code::Field("AccessControlList") ?> = <?= Code::Int("12") ?>
        
    <?= Code::Keyword("AND") ?>
        
        <?= Code::String("Entries") ?>.<?= Code::Field("User") ?> = <?= Code::Int("2") ?>
    
) <?= Code::Keyword("AS") ?> <?= Code::String("Permissions") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="Insert">
        <h4>Creating database records</h4>
        <p>
            To create new records, the Expression-library provides the global <code class="Inline"><?= Code::Class("Expression") ?>::<?= Code::Function("Insert") ?>()</code>
            factory-method;<br>
            which creates a new instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("IInsert") ?></code>-Expression according the current configured
            DataProvider.
        </p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Insert") ?>()
-><?= Code::Function("Into") ?>(<?= Code::String("\"Security.User\"") ?>)
-><?= Code::Function("Values") ?>([
     <?= Code::String("\"ID\"") ?> => <?= Code::Null ?>,
     <?= Code::String("\"Name\"") ?> => <?= Code::String("\"Username\"") ?>
     
])<?= Code::Delimiter ?>
    </code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("INSERT INTO") ?>
            
    <?= Code::Class("Security") ?>.<?= Code::Const("User") ?>(<?= Code::Field("ID") ?>, <?= Code::Field("Name") ?>)
<?= Code::Keyword("VALUES") ?>
    
    (<?= Code::Keyword("NULL") ?>, <?= Code::String("\"Username\"") ?>)<?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="LastInsertID">
        <h5>Retrieving autogenerated values</h5>
        <p>
            Instead of manually executing and retrieving the last autogenerated value via the <code class="Inline">\vDesk\<?= Code::Class("DataProvider") ?>::<?= Code::Function("LastInsertID") ?>()</code>-method,<br>
            calling the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("IInsert") ?>::<?= Code::Function("ID") ?>()</code>-method will immediately execute the
            Expression and retrieve the last auto generated value.
        </p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Variable("\$ID") ?> = <?= Code::Class("Expression") ?>::<?= Code::Function("Insert") ?>()
        -><?= Code::Function("Into") ?>(<?= Code::String("\"Table\"") ?>)
        -><?= Code::Function("Values") ?>([...])
        -><?= Code::Function("ID") ?>()<?= Code::Delimiter ?>
    </code></pre>
        </div>
    </section>
    <section id="Update">
        <h4>Updating database records</h4>
        <p>
            To update existing records, the Expression-library provides the global <code class="Inline"><?= Code::Class("Expression") ?>::<?= Code::Function("Update") ?>()</code>
            factory-method;<br>
            which creates a new instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("IUpdate") ?></code>-Expression according the current configured
            DataProvider.
        </p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Update") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("Set") ?>([<?= Code::String("\"Size\"") ?> => <?= Code::Int("1337") ?>])
-><?= Code::Function("Where") ?>([<?= Code::String("\"ID\"") ?> => <?= Code::Int("29") ?>])<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("Update") ?>

    <?= Code::Class("Archive") ?>.<?= Code::Const("Elements") ?>

<?= Code::Keyword("SET") ?>

    <?= Code::Field("Size") ?> = <?= Code::Int("1337") ?>

<?= Code::Keyword("WHERE") ?>

    <?= Code::Field("ID") ?> = <?= Code::Int("29") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="ConditionalUpdate">
        <h5>Conditional updates</h5>
        <p>
            To conveniently update a certain amount fields, a map of tuples can be passed instead to the <code class="Inline"><?= Code::Class("IUpdate") ?>::<?= Code::Function("SetIf") ?>()</code>-method.<br>
            The tuple-arrays must contain a boolean flag as the key of the desired value to set, <br>
            The fields with a true key-value will be updated; whilst the false values will be discarded.
        </p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Variable("\$SizeChanged") ?> = <?= Code::Bool("true") ?><?= Code::Delimiter ?>

<?= Code::Variable("\$ThumbnailChanged") ?> = <?= Code::Bool("false") ?><?= Code::Delimiter ?>


<?= Code::Class("Expression") ?>::<?= Code::Function("Update") ?>(<?= Code::String("\"Archive.Elements\"") ?>)
-><?= Code::Function("SetIf") ?>([
    <?= Code::Comment("//Occurs in the UPDATE-Query") ?>

    <?= Code::String("\"Size\"") ?>      => [<?= Code::Variable("\$SizeChanged") ?> => <?= Code::Int("1337") ?>],
    <?= Code::Comment("//Gets skipped") ?>

    <?= Code::String("\"Thumbnail\"") ?> => [<?= Code::Variable("\$ThumbnailChanged") ?> =>  <?= Code::Variable("\$Thumbnail") ?>]
])
-><?= Code::Function("Where") ?>([<?= Code::String("\"ID\"") ?> => <?= Code::Variable("\$ID") ?>])<?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="Delete">
        <h4>Deleting database records</h4>
        <p>
            To delete existing records, the Expression-library provides the global <code class="Inline"><?= Code::Class("Expression") ?>::<?= Code::Function("Delete") ?>()</code>
            factory-method;<br>
            which creates a new instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("IDelete") ?></code>-Expression according the current configured
            DataProvider.
        </p>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Delete") ?>()
-><?= Code::Function("From") ?>(<?= Code::String("\"Calendar.Events\"") ?>)
-><?= Code::Function("Where") ?>([<?= Code::String("\"ID\"") ?> => <?= Code::Int("37") ?>])<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("DELETE") ?> <?= Code::Keyword("FROM") ?>

    <?= Code::Class("Calendar") ?>.<?= Code::Const("Events") ?>

<?= Code::Keyword("WHERE") ?>

    <?= Code::Field("ID") ?> = <?= Code::Int("37") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="Create">
        <h3>Creating databases, schemas and tables</h3>
        <p>
            To create new databases, schemas and tables, the Expression-library provides the global <code class="Inline">Expression::<?= Code::Class("Create") ?></code> factory-method;<br>
            which creates a new instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("ICreate") ?></code>-Expression according the current configured
            DataProvider.
        </p>
    </section>
    <section id="CreateDatabase">
        <h4>Database</h4>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Create") ?>()
-><?= Code::Function("Database") ?>(<?= Code::String("\"vDesk\"") ?>)<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("CREATE") ?> <?= Code::Keyword("DATABASE") ?>

   <?= Code::Class("vDesk") ?><?= Code::Delimiter ?>
</code></pre>
</div>
<aside class="Note">
    <h4>Note</h4>
    <p>
        This method won't have any effect while using the MySQL DataProvider as of keeping compatibility to other databases due to the fact<br>
        that MySQL is the only major SQL-server which doesn't support schemas.<br>
        Calling this method will render the Expression "useless" upon execution by simply skipping the execution against the server and returning an empty, successful result-set in every case.
    </p>
    <p>
        To create a database, use the <code class="Inline"><?= Code::Class("ICreate") ?>::<?= Code::Function("Schema") ?>()</code>-method instead.
    </p>
    <p>
        These rules apply to the syntax described in the <a href="#DropSchema">Deleting schemas</a> and <a href="#DropSchema">updating schemas</a>-sections.
    </p>
</aside>
    </section>
    <section id="CreateSchema">
        <h4>Schema</h4>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Create") ?>()
-><?= Code::Function("Schema") ?>(<?= Code::String("\"Messenger\"") ?>)<?= Code::Delimiter ?>
</code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("CREATE") ?> <?= Code::Keyword("SCHEMA") ?>

   <?= Code::Class("Messenger") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="CreateTable">
        <h4>Table</h4>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Create") ?>()
-><?= Code::Function("Table") ?>(
    <?= Code::String("\"Messenger.Messages\"") ?>,
    [
        <?= Code::String("\"ID\"") ?>        => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("BigInt") ?> | <?= Code::Class("Type") ?>::<?= Code::Const("Unsigned") ?>, <?= Code::String("\"Autoincrement\"") ?> => <?= Code::Bool("true") ?>],
        <?= Code::String("\"Sender\"") ?>    => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("BigInt") ?> | <?= Code::Class("Type") ?>::<?= Code::Const("Unsigned") ?>, <?= Code::String("\"Nullable\"") ?> => <?= Code::Bool("true") ?>],
        <?= Code::String("\"Recipient\"") ?> => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("BigInt") ?> | <?= Code::Class("Type") ?>::<?= Code::Const("Unsigned") ?>, <?= Code::String("\"Default\"") ?> => <?= Code::Int("42") ?>],
        <?= Code::String("\"Status\"") ?>    => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("TinyInt") ?> | <?= Code::Class("Type") ?>::<?= Code::Const("Unsigned") ?>, <?= Code::String("\"Size\"") ?> => <?= Code::Int("2") ?>],
        <?= Code::String("\"Date\"") ?>      => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("DateTime") ?>],
        <?= Code::String("\"Text\"") ?>      => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("Text") ?>, <?= Code::String("\"Collation\"") ?> => <?= Code::Class("Collation") ?>::<?= Code::Const("UTF8") ?>]
    ],
    [
        <?= Code::String("\"Primary\"") ?>   => [<?= Code::String("\"Fields\"") ?> => [<?= Code::String("\"ID\"") ?>, <?= Code::String("\"Sender\"") ?>, <?= Code::String("\"Recipient\"") ?>, <?= Code::String("\"Status\"") ?>, <?= Code::String("\"Date\"") ?>]]
    ]
)<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("CREATE") ?> <?= Code::Keyword("TABLE") ?>
            
    <?= Code::Class("Messenger") ?>.<?= Code::Const("Messages") ?> (
        <?= Code::Field("ID") ?> <?= Code::Keyword("BIGINT") ?> <?= Code::Keyword("UNSIGNED") ?> <?= Code::Keyword("AUTO_INCREMENT") ?> <?= Code::Keyword("NOT NULL") ?>,
        <?= Code::Field("Sender") ?> <?= Code::Keyword("BIGINT") ?> <?= Code::Keyword("UNSIGNED") ?> <?= Code::Keyword("NULL") ?>,
        <?= Code::Field("Recipient") ?> <?= Code::Keyword("BIGINT") ?> <?= Code::Keyword("UNSIGNED") ?> <?= Code::Keyword("NOT NULL") ?> <?= Code::Keyword("DEFAULT") ?> <?= Code::Int("42") ?>,
        <?= Code::Field("Status") ?> <?= Code::Keyword("TINYINT") ?>(<?= Code::Int("2") ?>) <?= Code::Keyword("UNSIGNED") ?> <?= Code::Keyword("NOT NULL") ?>,
        <?= Code::Field("Date") ?> <?= Code::Keyword("DATETIME") ?> <?= Code::Keyword("NOT NULL") ?>,
        <?= Code::Field("Text") ?> <?= Code::Keyword("TEXT") ?> <?= Code::Keyword("COLLATE") ?> <?= Code::String("utf8mb4_unicode_ci") ?> <?= Code::Keyword("NOT NULL") ?>,
        <?= Code::Keyword("PRIMARY KEY") ?>(<?= Code::Field("ID") ?>, <?= Code::Field("Sender") ?>, <?= Code::Field("Recipient") ?>, <?= Code::Field("Status") ?>, <?= Code::Field("Date") ?>)
)<?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="CreateIndex">
        <h4>Index</h4>
        <div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Create") ?>()
-><?= Code::Function("Index") ?>(<?= Code::String("\"PrivateMessages\"") ?>)
-><?= Code::Function("On") ?>(<?= Code::String("\"Messenger.Messages\"") ?>)<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("CREATE INDEX") ?>

    <?= Code::Field("PrivateMessages") ?>

<?= Code::Keyword("ON") ?>

    <?= Code::Class("Messenger") ?>.<?= Code::Const("Messages") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="Alter">
        <h3>Updating databases, schemas and tables</h3>
        <p>
            To update existing tables, the Expression-library provides the global <code class="Inline">Expression::<?= Code::Class("Alter") ?></code> factory-method;<br>
            which creates a new instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("IAlter") ?></code>-Expression according the current configured
            DataProvider.
        </p>
        <p>
            Alternation of databases and schemas is limited to renaming.
        </p>
    </section>
    <section id="AlterDatabase">
        <h4>Database</h4>
        <div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Alter") ?>()
-><?= Code::Function("Database") ?>(<?= Code::String("\"vDesk\"") ?>)
-><?= Code::Function("Rename") ?>(<?= Code::String("\"Newname\"") ?>)<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("ALTER DATABASE") ?>

    <?= Code::Class("vDesk") ?>

<?= Code::Keyword("RENAME TO") ?>

    <?= Code::Class("Newname") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="AlterSchema">
        <h4>Schema</h4>
        <div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Alter") ?>()
-><?= Code::Function("Schema") ?>(<?= Code::String("\"Messenger\"") ?>)
-><?= Code::Function("Rename") ?>(<?= Code::String("\"Newname\"") ?>)<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("ALTER SCHEMA") ?>

    <?= Code::Class("Messenger") ?>

<?= Code::Keyword("RENAME TO") ?>

    <?= Code::Class("Newname") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
        <aside class="Note">
            <h4>Note</h4>
            <p>
                This method currently just transforms a single entity to another schema while using the MsSQL DataProvider.<br>
                Unfortunately, renaming schemas on a Ms SQL server isn't a trivial task and would require in it's simplest approach to scan the schema for it's entities first,<br>
                creating then a new schema with the new name and copying over every found entity and dropping the old schema afterwards.
            </p>
            <p>
                It is advised to plan schema names carefully until this problem has been addressed.
            </p>
        </aside>
    </section>
    <section id="AlterTable">
        <h4>Updating tables</h4>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Alter") ?>()
-><?= Code::Function("Table") ?>(<?= Code::String("\"Messenger.Messages\"") ?>)
-><?= Code::Function("Add") ?>(
    [<?= Code::String("\"ID\"") ?>    => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("BigInt") ?> | <?= Code::Class("Type") ?>::<?= Code::Const("Unsigned") ?> , <?= Code::String("\"Autoincrement\"") ?> => <?= Code::Bool("true") ?>]],
    [<?= Code::String("\"Conversation\"") ?> => [<?= Code::String("\"Unique\"") ?> => <?= Code::Bool("true") ?>,<?= Code::String("\"Fields\"") ?> => [<?= Code::String("\"ID\"") ?>, <?= Code::String("\"Sender\"") ?>, <?= Code::String("\"Recipient\"") ?>]]]
)
-><?= Code::Function("Modify") ?>(
    [<?= Code::String("\"Text\"") ?>  => [<?= Code::String("\"Type\"") ?> => <?= Code::Class("Type") ?>::<?= Code::Const("TinyText") ?>, <?= Code::String("\"Collation\"") ?> => <?= Code::Class("Collation") ?>::<?= Code::Const("ASCII") ?>]],
    [<?= Code::String("\"Index\"") ?> => [<?= Code::String("\"Fields\"") ?> => [<?= Code::String("\"ID\"") ?>, <?= Code::String("\"Sender\"") ?>, <?= Code::String("\"Recipient\"") ?>, <?= Code::String("\"Status\"") ?>, <?= Code::String("\"Date\"") ?>]]]
)
-><?= Code::Function("Rename") ?>([<?= Code::String("\"Hello\"") ?> => <?= Code::String("\"World\"") ?>])
-><?= Code::Function("Drop") ?>(
    [<?= Code::String("\"Date\"") ?>],
    [<?= Code::String("\"Conversation\"") ?>]
)<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("ALTER TABLE") ?>
            
    <?= Code::Class("Messenger") ?>.<?= Code::Const("Messages") ?>
    
<?= Code::Keyword("ADD COLUMN") ?> <?= Code::Field("ID") ?> <?= Code::Keyword("BIGINT") ?> <?= Code::Keyword("UNSIGNED") ?> <?= Code::Keyword("NOT NULL") ?> <?= Code::Keyword("AUTO_INCREMENT") ?>,
<?= Code::Keyword("ADD UNIQUE INDEX") ?> <?= Code::Field("Conversation") ?>(<?= Code::Field("ID") ?>, <?= Code::Field("Sender") ?>, <?= Code::Field("Recipient") ?>),

<?= Code::Keyword("ALTER COLUMN") ?> <?= Code::Field("Text") ?> <?= Code::Keyword("TINYTEXT") ?> <?= Code::Keyword("NOT NULL") ?> <?= Code::Keyword("COLLATE") ?> <?= Code::String("ascii_general_ci") ?>,
<?= Code::Keyword("ALTER INDEX") ?> <?= Code::Field("Index") ?>(<?= Code::Field("ID") ?>, <?= Code::Field("Sender") ?>, <?= Code::Field("Recipient") ?>, <?= Code::Field("Status") ?>, <?= Code::Field("Date") ?>),

<?= Code::Keyword("RENAME COLUMN") ?> <?= Code::Field("Hello") ?> <?= Code::Keyword("TO") ?> <?= Code::Field("World") ?>,

<?= Code::Keyword("DROP COLUMN") ?> <?= Code::Field("Date") ?>,
<?= Code::Keyword("DROP INDEX") ?> <?= Code::Field("Conversation") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
        <aside class="Note">
            <h4>Note</h4>
            <p>
                While using the PgSQL or MsSQL DataProvider, any dropped indices will be prepended to the final statement.<br>
                While using the MsSQL DataProvider, any dropped indices will be prepended to the final statement.
                Dropped indices will be prepended to the final statement while using the PgSQL or MsSQL DataProvider.
                This method currently just transforms a single entity to another schema while using the MsSQL DataProvider.<br>
                Unfortunately, renaming schemas on a Ms SQL server isn't a trivial task and would require in it's simplest approach to scan the schema for it's entities first,<br>
                creating then a new schema with the new name and copying over every found entity and dropping the old schema afterwards.
            </p>
            <p>
                It is advised to plan schema names carefully until this problem has been addressed.
            </p>
        </aside>
    </section>
    <section id="AlterIndex">
        <h4>Schema</h4>
        <div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Create") ?>()
-><?= Code::Function("Schema") ?>(<?= Code::String("\"Messenger\"") ?>)<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("CREATE") ?> <?= Code::Keyword("SCHEMA") ?>

    <?= Code::Class("Messenger") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="Drop">
        <h3>Deleting databases, schemas and tables</h3>
        <p>
            To delete databases, schemas and tables, the Expression-library provides the global <code class="Inline">Expression::<?= Code::Class("Drop") ?></code> factory-method;
            which creates a new instance of the <code class="Inline">\vDesk\DataProvider\Expression\<?= Code::Class("IDrop") ?></code>-Expression according the current configured
            DataProvider.
        </p>
    </section>
    <section id="DropDatabase">
        <h4>Database</h4>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Drop") ?>()
-><?= Code::Function("Database") ?>(<?= Code::String("\"vDesk\"") ?>)<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("DROP") ?> <?= Code::Keyword("DATABASE") ?>

    <?= Code::Class("vDesk") ?><?= Code::Delimiter ?>
</code></pre>
</div>
    </section>
    <section id="DropSchema">
        <h4>Schema</h4>
<div style="display: flex; justify-content: space-around;">
<pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Drop") ?>()
-><?= Code::Function("Schema") ?>(<?= Code::String("\"Messenger\"") ?>)<?= Code::Delimiter ?>
</code></pre>
    <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("DROP") ?> <?= Code::Keyword("SCHEMA") ?>

    <?= Code::Class("Messenger") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="DropTable">
        <h4>Table</h4>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Drop") ?>()
-><?= Code::Function("Table") ?>(<?= Code::String("\"Messenger.Messages\"") ?>)<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("DROP") ?> <?= Code::Keyword("TABLE") ?>
            
    <?= Code::Class("Messenger") ?>.<?= Code::Const("Messages") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
    <section id="DropIndex">
        <h4>Index</h4>
        <div style="display: flex; justify-content: space-around;">
            <pre style="margin: 10px"><code><?= Code\Language::PHP ?>
<?= Code::Class("Expression") ?>::<?= Code::Function("Drop") ?>()
-><?= Code::Function("Index") ?>(<?= Code::String("\"PrivateMessages\"") ?>)
-><?= Code::Function("On") ?>(<?= Code::String("\"Messenger.Messages\"") ?>)<?= Code::Delimiter ?>
</code></pre>
            <pre style="margin: 10px"><code><?= Code\Language::SQL ?>
<?= Code::Keyword("DROP INDEX") ?>

    <?= Code::Field("PrivateMessages") ?>

<?= Code::Keyword("ON") ?>

    <?= Code::Class("Messenger") ?>.<?= Code::Const("Messages") ?><?= Code::Delimiter ?>
</code></pre>
        </div>
    </section>
</article>